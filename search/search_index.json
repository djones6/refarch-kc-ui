{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"User Interface and BFF for the K Container shipment solution Abstract This repository includes the user interface to support the demonstration of the end to end Reefer containe shipment process. It is done with Angular 8 with a Back end for front end server done in Nodejs. This is the only component of the solution that is not using publishing events. You will learn how to do test driven development with Angular, and the BFF pattern in action. This project is part of the Container shipment reference implementation as presented in this project . User stories to support This project is in light development so the following user stories are in plan (or done): [x] As a fleet manager I want to login to the webapp to access the fleet management feature. Use eddie@email.com. [x] As a fleet manager I want to select one of the fleet to get the list of ships with their attributes in a table format, and plot the ship on a map at their respective position (latitude, longitude) [x] As a demoer I want to start ship movement so the ships move on the map [x] As a fleet manager I want to select one ship from the table of ships and present a detail view of it with its containers loaded in the boat [x] As a demoer I want to start the fire to container or heat wave or container down simulation from the detailed ship view [ ] As a demoer I want to see the message coming back from the streaming analytics about next best action from my simulation [ ] As a manufacturer manager I want to enter container shipment order information like product reference, quantity, pickup from address, earliest pickup date, shipment to address, shipment by date, and required temperature in transit range so the shipping company can give me back an order confirmation ( including the orderID), expected pickup and delivery dates, the assigned voyage and ship name As the microservice will not have a dedicated UI, we are using the demonstration UI to define the forms to gather the data. So this user story is implemented in the kc-ui project, and in this microservice we need to offer the create and update operations and get by order ID [ ] As a manufacturer manager I want to read the status of an order given its order id and receive a report with the full event history of related order, voyage ship and container events. The order id is generated by the order create operation, and is immutable. An order is assigned to a voyage at the time it is created. UI Development This is a traditional Angular 7 app with the app.module.ts using shared and features modules. Shared is for UI generic widgets, while features are for supporting the UI specific components linked to the business logic. There is no login page yet, but the home page displays a set of tiles to support the demonstration of the full shipment process as illustrated in the figure below: For the BFF code the server code is under the server folder and uses the standard patterns for expressjs middleware. The readme file goes into the details on this implementation. This project was generated with Angular CLI version 7.1. The user interface features are under the features folder. We are using a TDD approach as described in this note. The tests run with ng test . We also encourage to read the angular.io testing guide Contribute As this implementation solution is part of the Event Driven architeture reference architecture, the contribution policies apply the same way here. Contributors: Jerome Boyer Hemankita Perabathini Please contact me for any questions.","title":"Introduction"},{"location":"#user-interface-and-bff-for-the-k-container-shipment-solution","text":"Abstract This repository includes the user interface to support the demonstration of the end to end Reefer containe shipment process. It is done with Angular 8 with a Back end for front end server done in Nodejs. This is the only component of the solution that is not using publishing events. You will learn how to do test driven development with Angular, and the BFF pattern in action. This project is part of the Container shipment reference implementation as presented in this project .","title":"User Interface and BFF for the K Container shipment solution"},{"location":"#user-stories-to-support","text":"This project is in light development so the following user stories are in plan (or done): [x] As a fleet manager I want to login to the webapp to access the fleet management feature. Use eddie@email.com. [x] As a fleet manager I want to select one of the fleet to get the list of ships with their attributes in a table format, and plot the ship on a map at their respective position (latitude, longitude) [x] As a demoer I want to start ship movement so the ships move on the map [x] As a fleet manager I want to select one ship from the table of ships and present a detail view of it with its containers loaded in the boat [x] As a demoer I want to start the fire to container or heat wave or container down simulation from the detailed ship view [ ] As a demoer I want to see the message coming back from the streaming analytics about next best action from my simulation [ ] As a manufacturer manager I want to enter container shipment order information like product reference, quantity, pickup from address, earliest pickup date, shipment to address, shipment by date, and required temperature in transit range so the shipping company can give me back an order confirmation ( including the orderID), expected pickup and delivery dates, the assigned voyage and ship name As the microservice will not have a dedicated UI, we are using the demonstration UI to define the forms to gather the data. So this user story is implemented in the kc-ui project, and in this microservice we need to offer the create and update operations and get by order ID [ ] As a manufacturer manager I want to read the status of an order given its order id and receive a report with the full event history of related order, voyage ship and container events. The order id is generated by the order create operation, and is immutable. An order is assigned to a voyage at the time it is created.","title":"User stories to support"},{"location":"#ui-development","text":"This is a traditional Angular 7 app with the app.module.ts using shared and features modules. Shared is for UI generic widgets, while features are for supporting the UI specific components linked to the business logic. There is no login page yet, but the home page displays a set of tiles to support the demonstration of the full shipment process as illustrated in the figure below: For the BFF code the server code is under the server folder and uses the standard patterns for expressjs middleware. The readme file goes into the details on this implementation. This project was generated with Angular CLI version 7.1. The user interface features are under the features folder. We are using a TDD approach as described in this note. The tests run with ng test . We also encourage to read the angular.io testing guide","title":"UI Development"},{"location":"#contribute","text":"As this implementation solution is part of the Event Driven architeture reference architecture, the contribution policies apply the same way here. Contributors: Jerome Boyer Hemankita Perabathini Please contact me for any questions.","title":"Contribute"},{"location":"build-run/","text":"Build Run and Deploy the User Interface component Pre-requisites Be sure to have cloned the root repository: refarch_kc as there is a dependency on the environment setting scripts ( refarch_kc/scripts/setenv.sh ). The UI is using Angular so you need to get angular CLI installed, nodejs and npm. Keep npm up to date with the command: npm install - g npm Verify node version (we run v 12.0) node - v To install or update Angular CLI cd ui npm install - g @angular / cli And install all the dependencies npm install Note The project was started with Angular 6 and then migrated to Angular 8 with the commands: ng update @angular / cli @angular / core ng update @angular / material The test driven development approach is done using mocha as test runner and chai for assertion library and Typescript. Which means those tools were installed with the command: $ npm install mocha chai ts - node -- save - dev # and install the supporting types for Typescript # npm install @ types / chai @ types / mocha -- save - dev Build UI Build While doing development, you can build the UI first, by being under the ui folder and run: ng build You should get a trace like: chunk { main } main - es2015 . js , main - es2015 . js . map ( main ) 156 kB [ initial ] [ rendered ] chunk { polyfills } polyfills - es2015 . js , polyfills - es2015 . js . map ( polyfills ) 438 kB [ initial ] [ rendered ] chunk { runtime } runtime - es2015 . js , runtime - es2015 . js . map ( runtime ) 6.08 kB [ entry ] [ rendered ] chunk { styles } styles - es2015 . js , styles - es2015 . js . map ( styles ) 392 kB [ initial ] [ rendered ] chunk { vendor } vendor - es2015 . js , vendor - es2015 . js . map ( vendor ) 5.81 MB [ initial ] [ rendered ] The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build so the javascripts will be smaller. It is possible to test the User interface without the nodejs backend, by using ng serve Navigate to http://localhost:4200/. The app will automatically reload if you change any of the UI source files. You may encounter some issues as there are dependencies on the backend nodejs for some APIs and data. UI Running unit tests Run ng test to execute the unit tests via Karma . Build and run the BFF server Run the command below: npm serve All those commands are executed when developing the server or ui parts. But when we need to deploy the user interface with the other components of the solution we first need to build a docker image and then be sure the other services are deployed... Dockerize all Build UI and server in one command: (this is what a CI/CD pipeline will use). . / scripts / buildDocker . sh This will build a docker image, named: ibmcase/kcontainer-ui:latest for local execution using docker-compose. If you run on minikube locally use: . / scripts / buildDocker . sh MINIKUBE Run locally To be able to run the UI and server locally, you need to have at least the following kafka, zookeeper, order command, order query and fleet simulator microservices up and running. As introduced before we have two options to run the solution, Minikube or docker-compose. Using docker compose We recommend to read this chapter If not done already start Kafka and zookeeper using the docker compose file in the root project: cd .. / refarch - kc / docker docker - compose - f backbone - compose . yml up Start the Fleet simulator. For the fleet simulator see instructions here to run the simulator locally. Run the following command: ` . / scripts / buildLocal . sh ` Start the UI and BFF locally with ./scripts/run.sh or with a docker ./scripts/runDocker.sh . Use your web browser at http://localhost:31010 Using Minikube See the instruction in this article for deploying all the components. Use the scripts\\deployHelm MINIKUBE latest command to use Helm to deploy the user interface release. Use your web browser at http://localhost:31010 Deploy to OpenShift Container Platform (OCP) Deployment prerequisites Regardless of specific deployment targets (OCP, IKS, k8s), the following prerequisite Kubernetes artifacts need to be created to support the deployments of application components. These artifacts need to be created once per unique deployment of the entire application and can be shared between application components in the same overall application deployment. Create kafka-brokers ConfigMap Command: kubectl create configmap kafka-brokers --from-literal=brokers='<replace with comma-separated list of brokers>' -n <namespace> Example: kubectl create configmap kafka-brokers --from-literal=brokers='broker-3-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-2-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-1-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-5-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-0-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-4-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093' -n eda-refarch Create optional eventstreams-apikey Secret, if you are using Event Streams as your Kafka broker provider Command: kubectl create secret generic eventstreams-apikey --from-literal=binding='<replace with api key>' -n <namespace> Example: kubectl create secret generic eventstreams-apikey --from-literal=binding='z...12345...notanactualkey...67890...a' -n eda-refarch Deploy to OCP 3.11 Cross-component deployment prerequisites: (needs to be done once per unique deployment of the entire application) 1. If desired, create a non-default Service Account for usage of deploying and running the K Container reference implementation. This will become more important in future iterations, so it's best to start small: - Command: oc create serviceaccount -n <target-namespace> kcontainer-runtime - Example: oc create serviceaccount -n eda-refarch kcontainer-runtime 2. The target Service Account needs to be allowed to run containers as anyuid for the time being: - Command: oc adm policy add-scc-to-user anyuid -z <service-account-name> -n <target-namespace> - Example: oc adm policy add-scc-to-user anyuid -z kcontainer-runtime -n eda-refarch - NOTE: This requires cluster-admin level privileges. Perform the following for the kc-ui microservices: 1. Build and push Docker images 1. Create a Jenkins project, pointing to the remote GitHub repository for the KContainer UI Microservice, creating the necessary parameters. Refer to the individual microservice's Jenkinsfile.NoKubernetesPlugin for appropriate parameter values. - Create a String parameter named REGISTRY to determine a remote registry that is accessible from your cluster - Create a String parameter named REGISTRY_NAMESPACE to describe the registry namespace to push image into - Create a String parameter named IMAGE_NAME which should be self-expalantory - Create a String parameter named CONTEXT_DIR to determine the correct working directory to work from inside the source code, with respect to the root of the repository - Create a String parameter named DOCKERFILE to determine the desired Dockerfile to use to build the Docker image. This is determined with respect to the CONTEXT_DIR parameter. - Create a Credentials parameter named REGISTRY_CREDENTIALS and assign the necessary credentials to allow Jenkins to push the image to the remote repository 2. Manually build the Docker image and push it to a registry that is accessible from your cluster (Docker Hub, IBM Cloud Container Registry, manually deployed Quay instance): - docker build -t <private-registry>/<image-namespace>/kcontainer-ui:latest . - docker login <private-registry> - docker push <private-registry>/<image-namespace>/kcontainer-ui:latest 3. Generate application YAMLs via helm template : - Parameters: - --set image.repository=<private-registry>/<image-namespace>/<image-repository> - --set image.tag=latest - --set image.pullSecret=<private-registry-pullsecret> (only required if pulling from an external private registry) - --set image.pullPolicy=Always - --set eventstreams.env=ICP - --set eventstreams.brokersConfigMap=<kafka brokers ConfigMap name> - --set serviceAccountName=<service-account-name> - --namespace <target-namespace> - --output-dir <local-template-directory> - Example: helm template --set image.repository=rhos-quay.internal-network.local/browncompute/kc-ui --set image.pullPolicy=Always --set eventstreams.env=ICP --set eventstreams.brokersConfigMap=kafka-brokers --set serviceAccountName=kcontainer-runtime --output-dir templ --namespace eda-refarch chart/kc-ui/ 4. Deploy application using oc apply : - oc apply -f templ/kc-ui/templates","title":"Build and run"},{"location":"build-run/#build-run-and-deploy-the-user-interface-component","text":"","title":"Build Run and Deploy the User Interface component"},{"location":"build-run/#pre-requisites","text":"Be sure to have cloned the root repository: refarch_kc as there is a dependency on the environment setting scripts ( refarch_kc/scripts/setenv.sh ). The UI is using Angular so you need to get angular CLI installed, nodejs and npm. Keep npm up to date with the command: npm install - g npm Verify node version (we run v 12.0) node - v To install or update Angular CLI cd ui npm install - g @angular / cli And install all the dependencies npm install Note The project was started with Angular 6 and then migrated to Angular 8 with the commands: ng update @angular / cli @angular / core ng update @angular / material The test driven development approach is done using mocha as test runner and chai for assertion library and Typescript. Which means those tools were installed with the command: $ npm install mocha chai ts - node -- save - dev # and install the supporting types for Typescript # npm install @ types / chai @ types / mocha -- save - dev","title":"Pre-requisites"},{"location":"build-run/#build","text":"","title":"Build"},{"location":"build-run/#ui-build","text":"While doing development, you can build the UI first, by being under the ui folder and run: ng build You should get a trace like: chunk { main } main - es2015 . js , main - es2015 . js . map ( main ) 156 kB [ initial ] [ rendered ] chunk { polyfills } polyfills - es2015 . js , polyfills - es2015 . js . map ( polyfills ) 438 kB [ initial ] [ rendered ] chunk { runtime } runtime - es2015 . js , runtime - es2015 . js . map ( runtime ) 6.08 kB [ entry ] [ rendered ] chunk { styles } styles - es2015 . js , styles - es2015 . js . map ( styles ) 392 kB [ initial ] [ rendered ] chunk { vendor } vendor - es2015 . js , vendor - es2015 . js . map ( vendor ) 5.81 MB [ initial ] [ rendered ] The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build so the javascripts will be smaller. It is possible to test the User interface without the nodejs backend, by using ng serve Navigate to http://localhost:4200/. The app will automatically reload if you change any of the UI source files. You may encounter some issues as there are dependencies on the backend nodejs for some APIs and data.","title":"UI Build"},{"location":"build-run/#ui-running-unit-tests","text":"Run ng test to execute the unit tests via Karma .","title":"UI Running unit tests"},{"location":"build-run/#build-and-run-the-bff-server","text":"Run the command below: npm serve All those commands are executed when developing the server or ui parts. But when we need to deploy the user interface with the other components of the solution we first need to build a docker image and then be sure the other services are deployed...","title":"Build and run the BFF server"},{"location":"build-run/#dockerize-all","text":"Build UI and server in one command: (this is what a CI/CD pipeline will use). . / scripts / buildDocker . sh This will build a docker image, named: ibmcase/kcontainer-ui:latest for local execution using docker-compose. If you run on minikube locally use: . / scripts / buildDocker . sh MINIKUBE","title":"Dockerize all"},{"location":"build-run/#run-locally","text":"To be able to run the UI and server locally, you need to have at least the following kafka, zookeeper, order command, order query and fleet simulator microservices up and running. As introduced before we have two options to run the solution, Minikube or docker-compose.","title":"Run locally"},{"location":"build-run/#using-docker-compose","text":"We recommend to read this chapter If not done already start Kafka and zookeeper using the docker compose file in the root project: cd .. / refarch - kc / docker docker - compose - f backbone - compose . yml up Start the Fleet simulator. For the fleet simulator see instructions here to run the simulator locally. Run the following command: ` . / scripts / buildLocal . sh ` Start the UI and BFF locally with ./scripts/run.sh or with a docker ./scripts/runDocker.sh . Use your web browser at http://localhost:31010","title":"Using docker compose"},{"location":"build-run/#using-minikube","text":"See the instruction in this article for deploying all the components. Use the scripts\\deployHelm MINIKUBE latest command to use Helm to deploy the user interface release. Use your web browser at http://localhost:31010","title":"Using Minikube"},{"location":"build-run/#deploy-to-openshift-container-platform-ocp","text":"","title":"Deploy to OpenShift Container Platform (OCP)"},{"location":"build-run/#deployment-prerequisites","text":"Regardless of specific deployment targets (OCP, IKS, k8s), the following prerequisite Kubernetes artifacts need to be created to support the deployments of application components. These artifacts need to be created once per unique deployment of the entire application and can be shared between application components in the same overall application deployment. Create kafka-brokers ConfigMap Command: kubectl create configmap kafka-brokers --from-literal=brokers='<replace with comma-separated list of brokers>' -n <namespace> Example: kubectl create configmap kafka-brokers --from-literal=brokers='broker-3-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-2-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-1-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-5-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-0-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093,broker-4-j7fxtxtp5fs84205.kafka.svc01.us-south.eventstreams.cloud.ibm.com:9093' -n eda-refarch Create optional eventstreams-apikey Secret, if you are using Event Streams as your Kafka broker provider Command: kubectl create secret generic eventstreams-apikey --from-literal=binding='<replace with api key>' -n <namespace> Example: kubectl create secret generic eventstreams-apikey --from-literal=binding='z...12345...notanactualkey...67890...a' -n eda-refarch","title":"Deployment prerequisites"},{"location":"build-run/#deploy-to-ocp-311","text":"Cross-component deployment prerequisites: (needs to be done once per unique deployment of the entire application) 1. If desired, create a non-default Service Account for usage of deploying and running the K Container reference implementation. This will become more important in future iterations, so it's best to start small: - Command: oc create serviceaccount -n <target-namespace> kcontainer-runtime - Example: oc create serviceaccount -n eda-refarch kcontainer-runtime 2. The target Service Account needs to be allowed to run containers as anyuid for the time being: - Command: oc adm policy add-scc-to-user anyuid -z <service-account-name> -n <target-namespace> - Example: oc adm policy add-scc-to-user anyuid -z kcontainer-runtime -n eda-refarch - NOTE: This requires cluster-admin level privileges. Perform the following for the kc-ui microservices: 1. Build and push Docker images 1. Create a Jenkins project, pointing to the remote GitHub repository for the KContainer UI Microservice, creating the necessary parameters. Refer to the individual microservice's Jenkinsfile.NoKubernetesPlugin for appropriate parameter values. - Create a String parameter named REGISTRY to determine a remote registry that is accessible from your cluster - Create a String parameter named REGISTRY_NAMESPACE to describe the registry namespace to push image into - Create a String parameter named IMAGE_NAME which should be self-expalantory - Create a String parameter named CONTEXT_DIR to determine the correct working directory to work from inside the source code, with respect to the root of the repository - Create a String parameter named DOCKERFILE to determine the desired Dockerfile to use to build the Docker image. This is determined with respect to the CONTEXT_DIR parameter. - Create a Credentials parameter named REGISTRY_CREDENTIALS and assign the necessary credentials to allow Jenkins to push the image to the remote repository 2. Manually build the Docker image and push it to a registry that is accessible from your cluster (Docker Hub, IBM Cloud Container Registry, manually deployed Quay instance): - docker build -t <private-registry>/<image-namespace>/kcontainer-ui:latest . - docker login <private-registry> - docker push <private-registry>/<image-namespace>/kcontainer-ui:latest 3. Generate application YAMLs via helm template : - Parameters: - --set image.repository=<private-registry>/<image-namespace>/<image-repository> - --set image.tag=latest - --set image.pullSecret=<private-registry-pullsecret> (only required if pulling from an external private registry) - --set image.pullPolicy=Always - --set eventstreams.env=ICP - --set eventstreams.brokersConfigMap=<kafka brokers ConfigMap name> - --set serviceAccountName=<service-account-name> - --namespace <target-namespace> - --output-dir <local-template-directory> - Example: helm template --set image.repository=rhos-quay.internal-network.local/browncompute/kc-ui --set image.pullPolicy=Always --set eventstreams.env=ICP --set eventstreams.brokersConfigMap=kafka-brokers --set serviceAccountName=kcontainer-runtime --output-dir templ --namespace eda-refarch chart/kc-ui/ 4. Deploy application using oc apply : - oc apply -f templ/kc-ui/templates","title":"Deploy to OCP 3.11"}]}